---
layout: post
title: 나를 힘들게하는 프론트엔드 서버 통신 파헤쳐보기
categories: axios,fetch,api
author: tyLee
date: "2022-08-30 09:00:00 +0900"
---

<br>
-- 현재 이 포스트는 임시 포스터로 작업할 때마다 노션에 기록한 내용을 단순히 복사하고 붙여놓았다. 그래서 많이 다듬어지지 않은 내용일뿐더러 추가적으로 나의 생각들을 정리하려고 한다. 이 포스트는 프론트엔드에서 무조건 보게 되는 cors 문제와 404에러, proxy, axios/fetch에 관련하여 작성할 것이고 향후에는 JWT token, Local Storage에 관련하여 구상하고 있다.

<br>
<br>
## axios로 서버 통신 과정

<br>
##### 프론트단 초기 설정
package.json

```json
"proxy": "http://localhost:8000"
```

View.tsx

```jsx
import { useEffect, useState } from "react";
import axios from "axios";

const [products, setProducts] = useState([]);
useEffect(() => {
  // 불러오고자 하는 서버단 api 경로
  fetch("http://localhost:8000/api/products")
    .then((response) => {
      if (response.ok) {
        return response.json();
      }
      throw new Error("Network response was not ok.");
    })
    .then((data) => {
      setProducts(data);
      // console.log(JSON.stringify(data));
    })
    .catch((error) => {
      console.log(`error: ${error}`);
    });
}, []);

```

proxy 경로 오류

```jsx
axios.get("http://localhost:8000/api/products" // 오류
fetch("/api/products")) // 오류

// 해답
fetch("http://localhost:8000/api/products")

```

한 가지 의문점
proxy를 package.json에서 명시 해주었는데 왜 경로를 못 찾아가는가?

<br>
백엔드단

server.js

```jsx
import express from "express";
import data from "./data.js";

const app = express();

app.get("/api/products", (req, res) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.send(data.products);
});

const port = process.env.PORT || 8000;
app.listen(port, () => {
  console.log(`serve at http://localhost:${port}`);
});

```

cors 문제 해결

- server.js

```jsx
res.header("Access-Control-Allow-Origin", "*");
// 헤딩 cors 전역 통과 처리, 임시 방편으로 * 처리 한 것이며,
// 해당 접근 경로를 명확히 명시 해줘야 함.
```

궁금 한 것

http-proxy-middleware을 이용하여 cors 우회 하는 방법이 있다.

src > setupProxy.js 를 만들면 해당 파일의 이름으로 인해서 자동으로 파일을 인식해주는 것으로 알 고 있다.

하지만 여러 해결 방법을 찾아 본 결과 이 방법을 사용 하면 해결이 된다고 하였는데 결과는 달라지는게 없다는 점이였다.

```jsx
const { createProxyMiddleware } = require("http-proxy-middleware");

module.exports = function (app) {
  app.use(
    "/api",
    createProxyMiddleware({
      target: "http://localhost:8000/",
      changeOrigin: true,
    })
    // cors(
    //   { origin: "http://localhost:3000" },
    //   ("Access-Control-Allow-Origin", "*")
    // )
  );
};

```

주석 처리한 cors 부분은 cors 해결 방안을 열심히 구글링 한 후 넣은 것이다. 하지만 달라지는 것이 없어서 주석처리 하였다.

```jsx
const proxy = require("http-proxy-middleware");
const { createProxyMiddleware } = require("http-proxy-middleware");

module.exports = function (app) {
  app.use(
    createProxyMiddleware("/api", {
      target: "http://localhost:8000",
      changeOrigin: true,
    })
  );
};

```

```jsx
const proxy = require("http-proxy-middleware");
module.exports = function (app) {
  app.use(
    proxy("/api/**", {
      // https://github.com/chimurai/http-proxy-middleware
      target: "http://127.0.0.1:8000/",
      secure: false,
    })
  );
};

```

```jsx
const express = require("express");
const { createProxyMiddleware } = require("http-proxy-middleware");

const app = express();

app.use(
  "/api",
  createProxyMiddleware({
    target: "http://127.0.0.1:8000/",
    changeOrigin: true,
    secure: false,
  })
);

app.listen(8000);

```

프론트단 axios 서버 통신 삽질(오류)

```jsx
useEffect(() => {
  axios
    .get("http://localhost:8000/api/products", {
      name: "",
      parts: "",
      slug: "",
      category: "",
      image: "",
      price: "",
      countInStock: "",
      brand: "",
      rating: "",
    })
    .then((response) => setProducts(response.data));
}, []);

```

```jsx
useEffect(() => {
  const fetchData = async () => {
    try {
      const result = await axios.get("localhost:8000/api/products");
      setProducts(result.data);
    } catch (err) {}
  };
  fetchData();
  // console.log("result:", data);
}, []);

```

해결하지 못한 에러 및 궁금증

```jsx
const { data } = await axios.get(
  `http://localhost:8000/api/products/${product._id}`
);

```

이 코드는 아래와 같은 에러가 나온다.

아니. 도대체 왜?

해결방안은 결국 try, catch로 연동했다.

하지만 기나긴 삽질만 한채 결국 해결하지 못한 고민거리이다.

사실 예전부터 async, await문으로 api문을 두드렸지만 다 성공하지 못했어서 늘 try, catch를 써왔다.

이 고민은 다음 회사에 들어간다면 다른 분들에게 여쭈어 보려고 한다.

<br>
<img src="{{'/assets/img/axios/404error.png' || relative_url}}">
참조  
<https://codeutility.org/reactjs-uncaught-in-promise-error-request-failed-with-status-code-404-stack-overflow/>

<br>
해결 코드

```jsx
const data = () => {
  try {
    axios.get(`http://localhost:8000/api/products/${product._id}`);
  } catch (error) {
    error(getError(error));
  }
};

```

또 하나의 고민은

프록시 설정을 강제로 하였는데도

[http://localhost:8000/](http://localhost:8000/를) 를 써줘야 연결이 되는지 의문이다.

안적으면 에러가 난다.

setupProxy.js

```jsx
const { createProxyMiddleware } = require("http-proxy-middleware");

module.exports = function (app) {
  app.use(
    createProxyMiddleware("/api/*", {
      target: "http://localhost:8000/",
      secure: false,
    })
  );
};

```

package.json

```json
"proxy": "http://localhost:8000"
```

참조

cors

[https://developer-talk.tistory.com/91](https://developer-talk.tistory.com/91)

[https://velog.io/@wiostz98kr/React-Express-CORS-설정하기](https://velog.io/@wiostz98kr/React-Express-CORS-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0)

[https://velog.io/@yuhyerin/시행착오](https://velog.io/@yuhyerin/%EC%8B%9C%ED%96%89%EC%B0%A9%EC%98%A4)

[https://grap3fruit.dev/blog/Fetch-API-활용시-에러-해결-방법](https://grap3fruit.dev/blog/Fetch-API-%ED%99%9C%EC%9A%A9%EC%8B%9C-%EC%97%90%EB%9F%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95)

오류 처리

[https://yamoo9.github.io/axios/guide/error-handling.html](https://yamoo9.github.io/axios/guide/error-handling.html)

axios, try-catch, async-await 개념도 차이

[https://www.crocus.co.kr/1767](https://www.crocus.co.kr/1767)

axios 사용법

[https://webisfree.com/2022-04-28/[자바스크립트]-axios를-사용하여-비동기-호출시-try-catch-구문에서-404-에러의-response를-처리하는-방법](https://webisfree.com/2022-04-28/%5B%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%5D-axios%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C%EC%8B%9C-try-catch-%EA%B5%AC%EB%AC%B8%EC%97%90%EC%84%9C-404-%EC%97%90%EB%9F%AC%EC%9D%98-response%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95)

Network Error
