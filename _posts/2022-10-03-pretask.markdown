---
layout: post
title: 웹 페이지 구동 방식
categories: CSR,SSR,SSG
author: tyLee
date: "2022-10-03 09:00:00 +0900"
---

-- 유데미 강의와 우아한 테크를 참조로 하여 NEXT.JS를 공부하고 있는 중이다. 처음에는 SPA, MPA도 그렇고, CSR, SSR도 그렇고, NEST, NEXT, NUXT도 너무 비슷해보이는 이름들이 많아 헷갈렸다. 알고 짚고가는 내용임에도 불구하고 매번 용어들이 헷갈리게 된다. 포스팅을 함으로써 기억으로 남아 용어 정리가 되었으면 한다.

<br>

#### SPA, MPA, CSR, SSR

SPA는 하나의 페이지로 구성된 웹 어플리케이션이다. 특정 부분만 바뀌는 웹사이트들이다.  
MPA는 전통적인 웹 페이지 구상방식이다. 매번 새로운 HTML을 서버로부터 받아와야 하고, 전환 시마다 화면 깜빡임이 있어 유저에 불편함이 있음. AJAX가 등장하면서부터는 원하는 부분만 클라이언트에서 동적으로 갈아끼울 수 있고 화면 깜빡임도 없는 SPA를 사용하게 되었다.  
일반적으로 렌더링 방식은 SPA는 CSR로, MPA는 SSR로 구현된다. SPA는 필요한 정적 리소스를 초반 한번에 모두 다운로드하고 그 이후 새로운 홈페이지 요청이 있을 때 페이지 갱신에 필요한 데이터만 전달받아서 클라이언트에서 페이지를 갱신하기때문에 자연스러운 렌더링 떄문에 사용하게 됨, MPA는 새로운 요청이 있을 때마다 서버에서 이미 렌더링된 정적 리소스들을 받아오기떄문에 렌더링 방식을 SSR로 사용하게 된다.  
뷰, 앵글러, 리액트를 사용해서 SPA를 만들고, 특별한 목적을 가지고 렌더링 방식을 변경하지 않는다면 자연스럽게 CSR을 사용하게 된다.  
PHP,JSP를 사용한다면 자연스럽게 SSR를 사용하게 된다.  
CSR(클라이언트 사이드 렌더링), SSR(서버 사이드 렌더링)의 차이는 쉽게 말해 어느 쪽(사이드)에서 렌더링을 준비하느냐에 따른 차이이다.  
추가로 SSG(스태틱 사이트 제네릭)은 정적 렌더링으로 서버에서 요청 시에 즉시 만드느냐, 미리 다 만들어 놓느냐, 미리 다 만들어두니까 바뀔 일이 거의 없는 캐싱해주면 되는 페이지에 적합하다.

<br>

#### CSR과 SSR 동작 과정

CSR은 유저가 웹 사이트에 방문을 하면 브라우저가 서버에 콘텐츠 요청을 하고 서버는 빈 뼈대만 있는 HTML을 응답으로 보내주고, 브라우저가 연결된 JS링크를 통해 서버를 다시 JS파일을 다운로드 받고 JS을 이용해 동적으로 사이트를 뛰운다.(동적 DOM 생성)  
장단점은 초기 로딩 속도가 느림, 이후 구동 속도가 빠름, 서버가 빈 뼈대만 있는 HTML을 넘겨주면 되기때문에 서버측 부하 낮음, 클라이언트측에서 연산, 라우팅등을 모두 직접 처리하기 때문에 반응이 빠르고 UX가 높다는 장점이고, SEO(검색엔진)이 불리하다는 점이 치명적인 단점이다.  
SSR은 유저가 웹 사이트에 방문하면 브라우저에서 서버로 콘텐츠를 요청한다. 서버에서는 페이지에 필요한 데이터를 모두 삽입하고 CSS를 적용해서 렌더링 준비를 마친 HTML을 전달한다.(모든 데이터가 이미 HTML에 담겨져 있는 상태를 브라우저에 전달하기 때문에 검색엔진 최적화에 유리하다.)  
브라우저에서는 전달받은 HTML을 띄우고, 브라우저가 JS코드를 다운로드하고 JS 로직 연결을 한다. - 초기 구동 속도가 빠름, 사용자가 버튼을 클릭하거나 이동하려고 해도 반응이 없을 수도 있다.

<br>

#### CSR 단점 보완 방법

초기 로딩 속도 느림 -> 코드 스플리팅, 트리 쉐이킹으로 분리  
SEO 불리 -> 프리 렌더링을 통해, 웹 라이브러리나 웹 플러그인을 통해

<br>

#### 그러면 CSR + SSR/SSG 도입 방법은?

프레임워크 없이는 Express로 서버를 직접 운영하는 방법, 기본적으로 타입스크립트를 지원해주는 NEST.jS를 통해 환경 구성을 할 수 있음, 단점은 서버환경 구성이나 빌드 작업이 생소한 프론트엔드에서는 다소 진입장벽이 있다는 것이다.  
프레임워크 사용해서는 리액트 기준으로 NEXT.JS를 사용하고 정적 프레임워크인 개츠비를 사용하기도 한다. 개츠비는 SSG에 최적화된 리액트 기반 정적 웹 페이지 프레임워크이고, 다양한 플러그인을 제공해준다. 페이지가 적고 작은 서비스, 드문 업데이트인 프로젝트일 때 사용한다.

<br>

#### 그렇다면 CSR과 SSR은 어떨 때 사용해야 하는 것일까?

서비스 성격에 따라 달라진다.  
CSR은 유저랑 상호작용이 좀 많고, 검색 엔진이 크게 필요없는 프로젝트에 사용하면 된다. 대표적으로는 어드민 페이지가 떠오른다.  
SSR은 누구에게나 항상 같은 내용을 보여줘야하고, 상위 노출 되어야하고, 잦은 업데이트가 있는 프로젝트에 사용하면 된다. 대표적으로 회사 홈페이지이다.  
SSG는 SSR과 같은 상황에서 드문 업데이트일 경우에 적합하게 된다.

<br>

### 회고

신규 프로젝트를 진행하게 되었을 때 기술 스택을 결정하게 되는 순간들이 많을 것이라 생각된다. 프로젝트를 분석하고 적재적소하게 맞는 기술 스택을 선택하기 위해서는 앞서 다룬 내용인 CSR,SSR에 대한 지식을 기반으로 남들이 하니까, 그저 대세니까 하는 일반화보다는 프론트엔드로서 객관적으로 판단할 수 있는 사고와 시야의 폭을 확장하고 싶게 만드는 글이었다.
